openapi: 3.0.1
info:
  title: NEXA Bank - Authentication Service API
  description: |
    ## Overview
    The Authentication Service API provides comprehensive authentication and authorization services for NEXA Bank's microservices architecture.

    ## Key Features
    - **JWT-Based Authentication**: Secure token-based authentication using RSA-2048 asymmetric encryption
    - **User Registration**: Automated user registration with dual-profile creation (Auth + Full Profile)
    - **Session Management**: Redopenapi: 3.0.1
                                 info:
                                   title: NEXA Bank - Authentication Service API
                                   description: |
                                     ## Overview
                                     The Authentication Service API provides comprehensive authentication and authorization services for NEXA Bank's microservices architecture.
                                 
                                     ## Key Features
                                     - **JWT-Based Authentication**: Secure token-based authentication using RSA-2048 asymmetric encryption
                                     - **User Registration**: Automated user registration with dual-profile creation (Auth + Full Profile)
                                     - **Session Management**: Redis-backed session tracking with automatic expiration
                                     - **Token Denylist**: Real-time token invalidation for logout and security events
                                     - **Account Lockout**: Automatic lockout after failed login attempts with configurable duration
                                     - **Public Key Distribution**: JWK (JSON Web Key) endpoint for microservices token verification
                                     - **BCrypt Password Security**: Industry-standard password hashing with salt
                                 
                                     ## Authentication Flow
                                 
                                     ### Standard Login Flow
                                     1. **POST /api/auth/login**: Client submits credentials
                                     2. System validates username/password with BCrypt
                                     3. JWT access token generated (signed with RSA private key)
                                     4. Session created in Redis with 24-hour TTL
                                     5. Client receives access token for subsequent requests
                                 
                                     ### Token Verification in Microservices
                                     1. Microservice fetches public key from **GET /api/auth/public-key** (once, cached)
                                     2. For each request, verify JWT signature using public key
                                     3. Check token expiration and claims
                                     4. No need to call back to auth service for validation
                                 
                                     ### Logout Flow
                                     1. **POST /api/auth/logout**: Client submits token
                                     2. JWT ID (jti) added to denylist in Redis
                                     3. Session invalidated
                                     4. Failed login attempts cleared
                                     5. Token becomes invalid immediately
                                 
                                     ## Security Features
                                 
                                     ### RSA-2048 Asymmetric Encryption
                                     - **Private Key** (Auth Service only): Signs JWT tokens
                                     - **Public Key** (Shared via /public-key): Verifies token signatures
                                     - Microservices can verify tokens but **cannot create** them
                                     - More secure than symmetric HMAC where shared secret allows both signing and verification
                                 
                                     ### Token Denylist (Blacklist)
                                     - Logout immediately invalidates tokens
                                     - Prevents token reuse after logout
                                     - Redis-backed with TTL matching token expiration
                                     - Checked during every token validation
                                 
                                     ### Account Lockout Protection
                                     - **Trigger**: 5 failed login attempts
                                     - **Duration**: 10 minutes
                                     - **Cleared**: Successful login or manual unlock
                                     - Prevents brute force attacks
                                 
                                     ### Session Management
                                     - Redis-backed for high performance
                                     - Automatic expiration (24 hours default)
                                     - Session tracking per user
                                     - Multi-device support
                                 
                                     ## JWT Token Structure
                                 
                                     ### Access Token Claims
                                     ```json
                                     {
                                       "sub": "user@example.com",           // Subject (email)
                                       "jti": "uuid-v4",                    // JWT ID (for denylist)
                                       "userId": "usr_123456",              // User identifier
                                       "userType": "CUSTOMER",              // User type
                                       "roles": "USER,CUSTOMER",            // Comma-separated roles
                                       "iat": 1729584000,                   // Issued at
                                       "exp": 1729670400                    // Expiration
                                     }
                                     ```
                                 
                                     ### Token Expiration
                                     - **Access Token**: 24 hours (configurable)
                                     - **Refresh Token**: 7 days (configurable)
                                     - Tokens can be refreshed using **/api/auth/refresh** endpoint
                                 
                                     ## User Registration
                                 
                                     ### Dual Profile Creation
                                     When a user registers:
                                     1. **Auth Profile** created in Auth Service (authentication credentials)
                                     2. **Full Profile** created via Customer Registration Service (KYC, personal details)
                                     3. Both profiles linked by userId
                                     4. Immediate token generation (no separate login required)
                                 
                                     ### Registration Process
                                     1. Client submits registration details
                                     2. Validation: email uniqueness, password strength
                                     3. Password hashed with BCrypt (cost factor 10)
                                     4. User record created with PENDING status
                                     5. Call to Customer Registration Service for full profile
                                     6. JWT token generated and returned
                                 
                                     ## Public Key Distribution (JWK)
                                 
                                     ### JWK Format (RFC 7517)
                                     The **/api/auth/public-key** endpoint returns:
                                     ```json
                                     {
                                       "keys": [{
                                         "kty": "RSA",                      // Key type
                                         "alg": "RS256",                    // Algorithm
                                         "use": "sig",                      // Usage (signature)
                                         "kid": "nexabank-auth-key-1",     // Key ID
                                         "n": "xGOG1oTJ...",               // Modulus (Base64URL)
                                         "e": "AQAB"                        // Exponent (Base64URL)
                                       }]
                                     }
                                     ```
                                 
                                     ### Microservice Integration
                                     Most JWT libraries support JWK directly:
                                 
                                     **Java (Spring Security):**
                                     ```java
                                     @Bean
                                     public JwtDecoder jwtDecoder() {
                                         return NimbusJwtDecoder
                                             .withJwkSetUri("http://auth-service:3020/api/auth/public-key")
                                             .build();
                                     }
                                     ```
                                 
                                     **Node.js (jsonwebtoken):**
                                     ```javascript
                                     const jwksClient = require('jwks-rsa');
                                     const client = jwksClient({
                                       jwksUri: 'http://auth-service:3020/api/auth/public-key'
                                     });
                                     ```
                                 
                                     ## Error Handling
                                 
                                     ### Standard Error Response
                                     ```json
                                     {
                                       "message": "Error description",
                                       "timestamp": "2025-10-22T10:30:00Z"
                                     }
                                     ```
                                 
                                     ### Common Error Codes
                                     - **400 Bad Request**: Invalid input parameters
                                     - **401 Unauthorized**: Authentication failed, invalid credentials
                                     - **403 Forbidden**: Account locked, insufficient permissions
                                     - **409 Conflict**: User already exists (registration)
                                     - **500 Internal Server Error**: Server-side error
                                 
                                     ## Rate Limiting & Security
                                 
                                     ### Account Lockout
                                     - **Failed Attempts**: 5
                                     - **Lockout Duration**: 10 minutes
                                     - **Reset**: Successful login or manual unlock
                                 
                                     ### Redis Performance
                                     - Session lookup: O(1) complexity
                                     - Token denylist check: O(1) complexity
                                     - Automatic TTL expiration
                                 
                                     ## Integration Examples
                                 
                                     ### Example 1: Standard Login
                                     ```bash
                                     curl -X POST http://localhost:3020/api/auth/login \
                                       -H "Content-Type: application/json" \
                                       -d '{
                                         "email": "customer@example.com",
                                         "password": "SecurePass123!"
                                       }'
                                     ```
                                 
                                     **Response:**
                                     ```json
                                     {
                                       "token": "eyJhbGciOiJSUzI1NiJ9...",
                                       "userId": "usr_123456",
                                       "userType": "CUSTOMER",
                                       "email": "customer@example.com"
                                     }
                                     ```
                                 
                                     ### Example 2: Register New User
                                     ```bash
                                     curl -X POST http://localhost:3020/api/auth/register \
                                       -H "Content-Type: application/json" \
                                       -d '{
                                         "username": "johndoe",
                                         "email": "john.doe@example.com",
                                         "password": "SecurePass123!",
                                         "userType": "CUSTOMER"
                                       }'
                                     ```
                                 
                                     ### Example 3: Fetch Public Key for Token Verification
                                     ```bash
                                     curl -X GET http://localhost:3020/api/auth/public-key
                                     ```
                                 
                                     **Response:**
                                     ```json
                                     {
                                       "keys": [{
                                         "kty": "RSA",
                                         "alg": "RS256",
                                         "use": "sig",
                                         "kid": "nexabank-auth-key-1",
                                         "n": "xGOG1oTJ5YrKMZ...",
                                         "e": "AQAB"
                                       }]
                                     }
                                     ```
                                 
                                     ### Example 4: Logout
                                     ```bash
                                     curl -X POST http://localhost:3020/api/auth/logout \
                                       -H "Authorization: Bearer eyJhbGciOiJSUzI1NiJ9..."
                                     ```
                                 
                                     ## Architecture Notes
                                 
                                     ### Microservices Architecture
                                     - Auth Service runs on port 3020
                                     - Customer Registration Service: port 8080
                                     - Product & Pricing Service: port 8080
                                     - All services use JWT for authentication
                                     - Public key distributed via JWK endpoint
                                 
                                     ### Database & Cache
                                     - **PostgreSQL**: User credentials, audit logs
                                     - **Redis**: Sessions, token denylist, lockout tracking
                                     - Redis TTL matches token expiration for automatic cleanup
                                 
                                     ### Scalability
                                     - Stateless JWT tokens (no server-side session storage for verification)
                                     - Redis for fast session lookups
                                     - Horizontal scaling supported
                                     - Load balancer compatible
                                 
                                     ## Best Practices
                                 
                                     1. **Token Storage**: Store tokens securely (HttpOnly cookies or secure storage)
                                     2. **HTTPS Only**: Always use HTTPS in production
                                     3. **Token Refresh**: Implement token refresh before expiration
                                     4. **Logout**: Always call logout endpoint to invalidate tokens
                                     5. **Public Key Caching**: Cache public key in microservices (refresh periodically)
                                     6. **Error Handling**: Implement proper error handling for 401/403 responses
                                 
                                     ## Support
                                     For API support, integration help, or reporting issues:
                                     - Email: support@nexabank.com
                                     - Documentation: https://www.nexabank.com/api-docs
                                     - Status: https://status.nexabank.com
                                   termsOfService: https://www.nexabank.com/terms
                                   contact:
                                     name: NEXA Bank API Support
                                     url: https://www.nexabank.com
                                     email: support@nexabank.com
                                   license:
                                     name: Proprietary
                                     url: https://www.nexabank.com/license
                                   version: 1.0.0
                                 servers:
                                   - url: http://localhost:3020
                                     description: Development Server
                                   - url: https://api.nexabank.com
                                     description: Production Server
                                 security:
                                   - bearerAuth: []
                                 tags:
                                   - name: Public
                                     description: Public endpoints for JWT verification - accessible without authentication
                                   - name: Authentication
                                     description: Core authentication endpoints for login, registration, logout, and token refresh
                                   - name: Admin
                                     description: Administrative endpoints for account management and security operations
                                   - name: Public
                                     description: Public endpoints accessible without authentication
                                 paths:
                                   /api/admin/users/{userId}/status:
                                     put:
                                       tags:
                                         - admin-controller
                                       operationId: updateUserStatus
                                       parameters:
                                         - name: userId
                                           in: path
                                           required: true
                                           schema:
                                             type: string
                                         - name: Authorization
                                           in: header
                                           required: true
                                           schema:
                                             type: string
                                       requestBody:
                                         content:
                                           application/json:
                                             schema:
                                               type: object
                                               additionalProperties:
                                                 type: object
                                         required: true
                                       responses:
                                         '200':
                                           description: OK
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                   /api/admin/users/{userId}/roles:
                                     put:
                                       tags:
                                         - admin-controller
                                       operationId: updateUserRoles
                                       parameters:
                                         - name: userId
                                           in: path
                                           required: true
                                           schema:
                                             type: string
                                         - name: Authorization
                                           in: header
                                           required: true
                                           schema:
                                             type: string
                                       requestBody:
                                         content:
                                           application/json:
                                             schema:
                                               type: object
                                               additionalProperties:
                                                 type: object
                                         required: true
                                       responses:
                                         '200':
                                           description: OK
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                   /api/auth/register:
                                     post:
                                       tags:
                                         - Authentication
                                       summary: Register new user account
                                       description: |
                                         Register a new user with email, password, and basic details. Creates dual profiles and returns immediate access tokens.
                                 
                                         **Registration Process:**
                                         1. Validates email uniqueness in database
                                         2. Validates password strength requirements
                                         3. Hashes password with BCrypt (cost factor 10)
                                         4. Creates Auth Profile in Auth Service database
                                         5. Calls Customer Registration Service to create Full Profile
                                         6. Links both profiles by userId
                                         7. Generates JWT tokens for immediate login (no separate login required)
                                         8. Returns tokens and user data
                                 
                                         **Dual Profile Architecture:**
                                 
                                         **Auth Profile (This Service):**
                                         - Email, password hash, user type
                                         - Authentication credentials
                                         - Login/session management
                                         - Stored in PostgreSQL
                                 
                                         **Full Profile (Customer Service):**
                                         - Personal details, KYC information
                                         - Account preferences, documents
                                         - Transaction history
                                         - Stored in Customer Service database
                                 
                                         **Password Requirements:**
                                         - Minimum 8 characters
                                         - At least one uppercase letter
                                         - At least one lowercase letter
                                         - At least one number
                                         - Special characters recommended
                                 
                                         **User Types:**
                                         - **CUSTOMER**: Regular customer account
                                         - **ADMIN**: Administrative account (restricted)
                                         - **EMPLOYEE**: Bank employee account
                                         - **PARTNER**: Business partner account
                                 
                                         **Immediate Access:**
                                         - No email verification required
                                         - User can login immediately after registration
                                         - Access and refresh tokens provided in response
                                         - User status: PENDING (can be activated later)
                                 
                                         **Integration:**
                                         - Calls Customer Registration Service (port 8080)
                                         - Creates full customer profile automatically
                                         - Handles service failures gracefully
                                         - Rolls back on errors
                                 
                                         **Example Use Cases:**
                                 
                                         **New Customer Registration:**
                                         - Customer fills registration form
                                         - System validates and creates accounts
                                         - Returns tokens for immediate access
                                         - Customer can start using services
                                 
                                         **Employee Registration:**
                                         - Admin creates employee account
                                         - Employee type set to EMPLOYEE
                                         - Additional benefits applied
                                         - Full access granted immediately
                                       operationId: register
                                       requestBody:
                                         content:
                                           application/json:
                                             schema:
                                               $ref: '#/components/schemas/RegisterRequest'
                                         required: true
                                       responses:
                                         '201':
                                           description: Registration successful - user created and tokens generated
                                           content:
                                             application/json:
                                               schema:
                                                 $ref: '#/components/schemas/ApiResponse'
                                               examples:
                                                 Customer Registration:
                                                   summary: New customer successfully registered
                                                   description: Customer Registration
                                                   value:
                                                     success: true
                                                     message: User registered successfully
                                                     data:
                                                       accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJuZXdjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6ImFiY2RlZjEyLTM0NTYtNzg5MC1hYmNkLWVmMTIzNDU2Nzg5MCIsInVzZXJJZCI6InVzcl83ODkwMTIiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwicm9sZXMiOiJVU0VSLENVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3Mjk2NzA0MDB9...
                                                       refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJuZXdjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6IjEyMzQ1Njc4LTkwYWItY2RlZi0xMjM0LTU2Nzg5MGFiY2RlZiIsInVzZXJJZCI6InVzcl83ODkwMTIiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                                                       tokenType: Bearer
                                                       expiresIn: 86400
                                                       user:
                                                         userId: usr_789012
                                                         username: janedoe
                                                         email: newcustomer@example.com
                                                         userType: CUSTOMER
                                                         roles:
                                                           - USER
                                                           - CUSTOMER
                                                         status: PENDING
                                                     timestamp: '2025-10-22T10:30:00Z'
                                                 Employee Registration:
                                                   summary: New employee account registered
                                                   description: Employee Registration
                                                   value:
                                                     success: true
                                                     message: User registered successfully
                                                     data:
                                                       accessToken: eyJhbGciOiJSUzI1NiJ9...
                                                       refreshToken: eyJhbGciOiJSUzI1NiJ9...
                                                       tokenType: Bearer
                                                       expiresIn: 86400
                                                       user:
                                                         userId: usr_345678
                                                         username: employee1
                                                         email: employee@nexabank.com
                                                         userType: EMPLOYEE
                                                         roles:
                                                           - USER
                                                           - EMPLOYEE
                                                           - SUPPORT
                                                         status: ACTIVE
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '400':
                                           description: Bad request - validation failed
                                           content:
                                             application/json:
                                               examples:
                                                 Validation Error:
                                                   summary: Invalid input parameters
                                                   description: Validation Error
                                                   value:
                                                     success: false
                                                     message: Password must be at least 8 characters
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '409':
                                           description: Conflict - user already exists with this email
                                           content:
                                             application/json:
                                               examples:
                                                 User Already Exists:
                                                   summary: Email already registered
                                                   description: User Already Exists
                                                   value:
                                                     success: false
                                                     message: User with this email already exists
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '500':
                                           description: Server error during registration
                                           content:
                                             application/json:
                                               examples:
                                                 Server Error:
                                                   description: Server Error
                                                   value:
                                                     success: false
                                                     message: 'Registration failed: Customer service unavailable'
                                                     timestamp: '2025-10-22T10:30:00Z'
                                   /api/auth/register/admin:
                                     post:
                                       tags:
                                         - Authentication
                                       summary: Register new admin user (Admin access required)
                                       description: |
                                         Register a new admin user. This endpoint requires admin authentication via JWT token.
                                 
                                         **Authorization Required:**
                                         - Must be authenticated with valid JWT token
                                         - Token must have ADMIN_FULL_ACCESS or ADMIN_USER_MANAGEMENT role
                                         - Token userType must be "ADMIN"
                                 
                                         **Admin Creation Process:**
                                         1. Validates requesting admin's JWT token
                                         2. Checks for ADMIN_USER_MANAGEMENT or ADMIN_FULL_ACCESS role
                                         3. Creates new admin user with specified roles
                                         4. Returns JWT tokens for the new admin
                                 
                                         **Security:**
                                         - Only existing admins can create new admins
                                         - Prevents privilege escalation
                                         - All admin actions are auditable
                                 
                                         **Example Request:**
                                         ```
                                         POST /api/auth/register/admin
                                         Authorization: Bearer <admin-jwt-token>
                                         Content-Type: application/json
                                 
                                         {
                                           "email": "newadmin@nexabank.com",
                                           "password": "SecurePass123!",
                                           "firstName": "John",
                                           "lastName": "Admin",
                                           "phoneNumber": "9876543210",
                                           "dateOfBirth": "1990-01-01"
                                         }
                                         ```
                                       operationId: registerAdmin
                                       requestBody:
                                         content:
                                           application/json:
                                             schema:
                                               $ref: '#/components/schemas/RegisterRequest'
                                         required: true
                                       responses:
                                         '201':
                                           description: Admin registered successfully
                                           content:
                                             application/json: {}
                                         '401':
                                           description: Unauthorized - Invalid or missing admin token
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                         '403':
                                           description: Forbidden - Requires admin privileges
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                         '409':
                                           description: Conflict - Admin with email already exists
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                   /api/auth/refresh:
                                     post:
                                       tags:
                                         - Authentication
                                       summary: Refresh access token using refresh token
                                       description: |
                                         Exchange refresh token for new access and refresh tokens. Implements token rotation for security.
                                 
                                         **Token Refresh Process:**
                                         1. Validates refresh token signature and expiration
                                         2. Checks if user account is locked out
                                         3. Extracts user email from refresh token
                                         4. Generates new access token (24h validity)
                                         5. Generates new refresh token (7d validity)
                                         6. Adds old refresh token to denylist (prevents reuse)
                                         7. Resets user session lockout (extends 10-minute lock)
                                         8. Returns new token pair
                                 
                                         **Token Rotation:**
                                         - Old refresh token immediately invalidated
                                         - New refresh token issued with each request
                                         - Prevents refresh token theft and replay attacks
                                         - One-time use refresh tokens
                                 
                                         **Security Benefits:**
                                         - Refresh token rotation (one-time use)
                                         - Old tokens added to denylist
                                         - Account lockout check before refresh
                                         - Stolen token detection
                                 
                                         **When to Use:**
                                         - Access token expired or about to expire
                                         - Proactive token refresh (before expiration)
                                         - User still active but token old
                                         - Maintaining session continuity
                                 
                                         **Best Practices:**
                                         - Refresh token before access token expires
                                         - Store new tokens securely
                                         - Invalidate old tokens immediately
                                         - Implement retry logic with exponential backoff
                                 
                                         **Token Lifecycle:**
                                         1. **Login**: Get initial token pair (access + refresh)
                                         2. **Use**: Use access token for API calls
                                         3. **Refresh**: Before expiration, refresh tokens
                                         4. **Repeat**: Continue refresh cycle
                                         5. **Logout**: Invalidate all tokens
                                 
                                         **Example Use Cases:**
                                 
                                         **Proactive Refresh:**
                                         - Frontend checks token expiration
                                         - 5 minutes before expiry, calls refresh
                                         - Gets new tokens without user interaction
                                         - Seamless user experience
                                 
                                         **Expired Token:**
                                         - API returns 401 Unauthorized
                                         - Frontend automatically calls refresh
                                         - Retries original request with new token
                                         - Transparent to user
                                 
                                         **Long Session:**
                                         - User active for multiple hours
                                         - Tokens refreshed periodically
                                         - No re-login required
                                         - Maintains security with rotation
                                       operationId: refresh
                                       requestBody:
                                         description: Refresh token request containing the refresh token
                                         content:
                                           application/json:
                                             schema:
                                               $ref: '#/components/schemas/RefreshTokenRequest'
                                             examples:
                                               Refresh Request:
                                                 description: Refresh Request
                                                 value:
                                                   refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im9sZC1yZWZyZXNoLWlkLTc4OSIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTAwMDAwLCJleHAiOjE3MzAxMDQ4MDB9...
                                         required: true
                                       responses:
                                         '200':
                                           description: Token refresh successful - new tokens generated
                                           content:
                                             application/json:
                                               schema:
                                                 $ref: '#/components/schemas/ApiResponse'
                                               examples:
                                                 Successful Refresh:
                                                   summary: Tokens successfully refreshed
                                                   description: Successful Refresh
                                                   value:
                                                     success: true
                                                     message: Token refreshed successfully
                                                     data:
                                                       accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im5ldy1qd3QtaWQtMTIzIiwidXNlcklkIjoidXNyXzEyMzQ1NiIsInVzZXJUeXBlIjoiQ1VTVE9NRVIiLCJyb2xlcyI6IlVTRVIsQ1VTVE9NRVIiLCJpYXQiOjE3Mjk1ODQwMDAsImV4cCI6MTcyOTY3MDQwMH0...
                                                       refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im5ldy1yZWZyZXNoLWlkLTQ1NiIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                                                       tokenType: Bearer
                                                       expiresIn: 86400
                                                       user:
                                                         userId: usr_123456
                                                         username: johndoe
                                                         email: customer@example.com
                                                         userType: CUSTOMER
                                                         roles:
                                                           - USER
                                                           - CUSTOMER
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '401':
                                           description: Invalid or expired refresh token
                                           content:
                                             application/json:
                                               examples:
                                                 Invalid Token:
                                                   summary: Refresh token invalid or expired
                                                   description: Invalid Token
                                                   value:
                                                     success: false
                                                     message: Invalid refresh token
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '423':
                                           description: Account locked - cannot refresh
                                           content:
                                             application/json:
                                               examples:
                                                 Account Locked:
                                                   description: Account Locked
                                                   value:
                                                     success: false
                                                     message: Account locked. Please try again in 450 seconds
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '500':
                                           description: Server error during token refresh
                                           content:
                                             application/json:
                                               examples:
                                                 Server Error:
                                                   description: Server Error
                                                   value:
                                                     success: false
                                                     message: 'Token refresh failed: Internal server error'
                                                     timestamp: '2025-10-22T10:30:00Z'
                                   /api/auth/logout:
                                     post:
                                       tags:
                                         - Authentication
                                       summary: Logout user and invalidate tokens
                                       description: |
                                         Logout user by invalidating JWT token and clearing session. Token becomes immediately unusable.
                                 
                                         **Logout Process:**
                                         1. Extracts JWT token from Authorization header
                                         2. Adds JWT ID (jti) to Redis denylist (immediate invalidation)
                                         3. Clears user session lockout (allows immediate re-login)
                                         4. Invalidates session in Redis
                                         5. Returns success confirmation
                                 
                                         **Token Invalidation:**
                                         - JWT ID added to denylist in Redis
                                         - Denylist TTL matches token expiration
                                         - All subsequent requests with this token fail validation
                                         - Works even if token hasn't expired
                                 
                                         **Session Cleanup:**
                                         - Session removed from Redis
                                         - User lockout cleared (10-minute restriction removed)
                                         - Failed login attempts reset
                                         - User can login again immediately
                                 
                                         **Security Benefits:**
                                         - Immediate token revocation
                                         - Prevents token reuse after logout
                                         - Protects against stolen tokens
                                         - Graceful session termination
                                 
                                         **Microservices Impact:**
                                         - Other microservices will reject denylisted tokens
                                         - Public key verification still works
                                         - Denylist needs to be checked during verification
                                         - Consider implementing denylist sync if needed
                                 
                                         **Example Use Cases:**
                                 
                                         **Standard Logout:**
                                         - User clicks logout button
                                         - Frontend sends token to this endpoint
                                         - Token immediately invalidated
                                         - User redirected to login page
                                 
                                         **Security Logout:**
                                         - Suspicious activity detected
                                         - Admin forces user logout
                                         - All user sessions terminated
                                         - User must re-authenticate
                                 
                                         **Session Timeout:**
                                         - Frontend detects token expiration
                                         - Calls logout to cleanup
                                         - User prompted to login again
                                         - Clean session state
                                       operationId: logout
                                       parameters:
                                         - name: Authorization
                                           in: header
                                           description: 'Bearer token in format: Bearer <token>'
                                           required: true
                                           schema:
                                             type: string
                                           example: Bearer eyJhbGciOiJSUzI1NiJ9...
                                       responses:
                                         '200':
                                           description: Logout successful - token invalidated
                                           content:
                                             application/json:
                                               examples:
                                                 Successful Logout:
                                                   summary: User successfully logged out
                                                   description: Successful Logout
                                                   value:
                                                     success: true
                                                     message: Logged out successfully
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '500':
                                           description: Server error during logout
                                           content:
                                             application/json:
                                               examples:
                                                 Server Error:
                                                   description: Server Error
                                                   value:
                                                     success: false
                                                     message: 'Logout failed: Redis connection error'
                                                     timestamp: '2025-10-22T10:30:00Z'
                                   /api/auth/login:
                                     post:
                                       tags:
                                         - Authentication
                                       summary: User login with email and password
                                       description: |
                                         Authenticate user with email and password credentials. Returns JWT access and refresh tokens.
                                 
                                         **Authentication Flow:**
                                         1. Checks if account is locked out (after 5 failed attempts)
                                         2. Validates email and password using BCrypt
                                         3. Generates JWT access token (24h) and refresh token (7d)
                                         4. Sets 10-minute session lockout (prevents concurrent sessions)
                                         5. Creates session in Redis for tracking
                                 
                                         **Account Lockout Protection:**
                                         - **Trigger**: 5 consecutive failed login attempts
                                         - **Duration**: 10 minutes
                                         - **Cleared**: Successful login or explicit logout
                                         - Prevents brute force attacks
                                 
                                         **Token Details:**
                                         - **Access Token**: Used for API authentication (24 hours)
                                         - **Refresh Token**: Used to obtain new access token (7 days)
                                         - Both tokens signed with RSA-2048 private key
                                         - JWT ID (jti) included for denylist tracking
                                 
                                         **Session Management:**
                                         - Session created in Redis with 24-hour TTL
                                         - User locked for 10 minutes (single session enforcement)
                                         - Must logout to unlock for new login
                                 
                                         **Example Use Cases:**
                                 
                                         **Customer Login:**
                                         - Customer enters email and password
                                         - System validates credentials
                                         - Returns tokens for authenticated requests
                                         - Frontend stores tokens securely
                                 
                                         **Failed Login:**
                                         - Invalid credentials tracked
                                         - After 5 failures, account locked for 10 minutes
                                         - Lockout status can be checked via /lockout-status endpoint
                                 
                                         **Security Features:**
                                         - BCrypt password hashing (cost factor 10)
                                         - Failed attempt tracking in Redis
                                         - Automatic account lockout
                                         - Session-based lockout (no concurrent sessions)
                                       operationId: login
                                       requestBody:
                                         content:
                                           application/json:
                                             schema:
                                               $ref: '#/components/schemas/LoginRequest'
                                         required: true
                                       responses:
                                         '200':
                                           description: Login successful - tokens generated
                                           content:
                                             application/json:
                                               schema:
                                                 $ref: '#/components/schemas/ApiResponse'
                                               examples:
                                                 Successful Login:
                                                   summary: Customer successfully logged in
                                                   description: Successful Login
                                                   value:
                                                     success: true
                                                     message: Login successful
                                                     data:
                                                       accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6IjEyMzQ1Njc4LTkwYWItY2RlZi0xMjM0LTU2Nzg5MGFiY2RlZiIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwicm9sZXMiOiJVU0VSLENVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3Mjk2NzA0MDB9...
                                                       refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Ijk4NzY1NDMyLTEwZmUtZGNiYS00MzIxLTA5ODc2NTQzMjFmZSIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                                                       tokenType: Bearer
                                                       expiresIn: 86400
                                                       user:
                                                         userId: usr_123456
                                                         username: johndoe
                                                         email: customer@example.com
                                                         userType: CUSTOMER
                                                         roles:
                                                           - USER
                                                           - CUSTOMER
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '401':
                                           description: Authentication failed - invalid credentials
                                           content:
                                             application/json:
                                               examples:
                                                 Invalid Credentials:
                                                   summary: Wrong email or password
                                                   description: Invalid Credentials
                                                   value:
                                                     success: false
                                                     message: Invalid email or password
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '423':
                                           description: Account locked - too many failed attempts
                                           content:
                                             application/json:
                                               examples:
                                                 Account Locked:
                                                   summary: Account locked due to failed attempts
                                                   description: Account Locked
                                                   value:
                                                     success: false
                                                     message: Account locked. Please try again in 587 seconds
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '500':
                                           description: Server error during authentication
                                           content:
                                             application/json:
                                               examples:
                                                 Server Error:
                                                   description: Server Error
                                                   value:
                                                     success: false
                                                     message: 'Authentication failed: Internal server error'
                                                     timestamp: '2025-10-22T10:30:00Z'
                                   /api/auth/public-key:
                                     get:
                                       tags:
                                         - Authentication
                                         - Public
                                       summary: Get JWT public key for token verification
                                       description: |
                                         Retrieve RSA public key in JWK (JSON Web Key) format for independent JWT token verification.
                                 
                                         **Purpose:**
                                         - Enable microservices to verify JWT tokens without calling back to auth service
                                         - Distribute public key in industry-standard JWK format (RFC 7517)
                                         - Support stateless authentication architecture
                                         - Improve performance and reduce auth service load
                                 
                                         **JWK Format (RFC 7517):**
                                         Returns JWKS (JWK Set) with single RSA public key containing:
                                         - **kty**: Key type (RSA)
                                         - **alg**: Algorithm (RS256 - RSA with SHA-256)
                                         - **use**: Key usage (sig - signature verification)
                                         - **kid**: Key ID (nexabank-auth-key-1)
                                         - **n**: RSA modulus (Base64URL encoded)
                                         - **e**: RSA public exponent (Base64URL encoded, typically AQAB)
                                 
                                         **RSA-2048 Asymmetric Encryption:**
                                         - **Private Key** (Auth Service only): Signs JWT tokens
                                         - **Public Key** (Shared via this endpoint): Verifies token signatures
                                         - Microservices can verify but **cannot create** tokens
                                         - More secure than symmetric HMAC (shared secret)
                                 
                                         **Microservice Integration:**
                                 
                                         **Java (Spring Security):**
                                         ```java
                                         @Bean
                                         public JwtDecoder jwtDecoder() {
                                             return NimbusJwtDecoder
                                                 .withJwkSetUri("http://auth-service:3020/api/auth/public-key")
                                                 .build();
                                         }
                                         ```
                                 
                                         **Node.js (jwks-rsa + jsonwebtoken):**
                                         ```javascript
                                         const jwksClient = require('jwks-rsa');
                                         const jwt = require('jsonwebtoken');
                                 
                                         const client = jwksClient({
                                           jwksUri: 'http://auth-service:3020/api/auth/public-key',
                                           cache: true,
                                           cacheMaxAge: 86400000 // 24 hours
                                         });
                                 
                                         function getKey(header, callback) {
                                           client.getSigningKey(header.kid, (err, key) => {
                                             const signingKey = key.publicKey || key.rsaPublicKey;
                                             callback(null, signingKey);
                                           });
                                         }
                                 
                                         // Verify token
                                         jwt.verify(token, getKey, { algorithms: ['RS256'] }, (err, decoded) => {
                                           if (err) console.error('Invalid token');
                                           else console.log('Valid token:', decoded);
                                         });
                                         ```
                                 
                                         **Python (PyJWT):**
                                         ```python
                                         import jwt
                                         from jwt import PyJWKClient
                                 
                                         jwks_client = PyJWKClient('http://auth-service:3020/api/auth/public-key')
                                         signing_key = jwks_client.get_signing_key_from_jwt(token)
                                 
                                         data = jwt.decode(
                                             token,
                                             signing_key.key,
                                             algorithms=["RS256"]
                                         )
                                         ```
                                 
                                         **Best Practices:**
                                         1. **Cache Public Key**: Fetch once and cache (key doesn't change frequently)
                                         2. **Periodic Refresh**: Refresh cache every 24 hours or on verification failure
                                         3. **Handle Rotation**: Support key rotation with kid (key ID) matching
                                         4. **Denylist Check**: Implement denylist check if needed for immediate revocation
                                         5. **Algorithm Validation**: Always validate algorithm is RS256
                                 
                                         **Security Notes:**
                                         - Public key can be safely exposed (public endpoint, no auth required)
                                         - Cannot be used to create new tokens (private key required)
                                         - Enables zero-trust architecture
                                         - Supports horizontal scaling of auth service
                                 
                                         **Use Cases:**
                                 
                                         **Microservice Authentication:**
                                         - Payment service verifies user tokens
                                         - Account service validates requests
                                         - Transaction service checks authorization
                                         - No round-trip to auth service needed
                                 
                                         **API Gateway:**
                                         - Gateway fetches public key on startup
                                         - Verifies all incoming requests
                                         - Routes only valid requests to services
                                         - Rejects invalid tokens immediately
                                 
                                         **Mobile Apps:**
                                         - App verifies token before API calls
                                         - Offline token validation
                                         - Reduced latency
                                         - Better user experience
                                       operationId: getPublicKey
                                       responses:
                                         '200':
                                           description: Public key retrieved successfully in JWK format
                                           content:
                                             application/json:
                                               examples:
                                                 JWK Public Key:
                                                   summary: RSA public key in JWKS format
                                                   description: JWK Public Key
                                                   value:
                                                     keys:
                                                       - kty: RSA
                                                         alg: RS256
                                                         use: sig
                                                         kid: nexabank-auth-key-1
                                                         'n': xGOG1oTJ5YrKMZKm9FZFvQW8cPJHKqH8vGsJ7rL5TwN8mVxPYvK2hL9sR4mN3pQ6tW8xY9zK7jM5nP8qR2sT4uV6wX0yA1bC3dE5fG7hI9jK1lM3nO5pQ7rS9tU1vW3xY5zA7bC9dE1fG3hI5jK7lM9nO1pQ3rS5tU7vW9xY1zA3bC5dE7fG9hI1jK3lM5nO7pQ9rS1tU3vW5xY7zA9bC1dE3fG5hI7jK9lM1nO3pQ5rS7tU9vW1xY3zA5bC7dE9fG1hI3jK5lM7nO9pQ1rS3tU5vW7xY9zA1bC3dE5fG7hI9jK1lM3nO5pQ7rS9tU1vW3xY5zA7bC9dE1fG3hI5jK7lM9nO1pQ3rS5tU7vW9xY1zA3bC5dE7fG9hI1jK3lM5nO7pQ9rS1tU3vW5xY7zA9bC1dE3fG5hI7jK9lM1nO3pQ5rS7tU9vW1xY3zA5bC7dE9fG1hI3jK5lM7nO9pQ1rS3tU5vW7xY9zA
                                                         e: AQAB
                                   /api/auth/lockout-status/{email}:
                                     get:
                                       tags:
                                         - Authentication
                                       summary: Check account lockout status
                                       description: |
                                         Check if a user account is currently locked out and get remaining lockout time.
                                 
                                         **Lockout Status Check:**
                                         - Returns current lockout state for given email
                                         - Shows remaining time if account is locked
                                         - Returns 0 seconds if account is not locked
                                         - Useful for UI to display lockout information
                                 
                                         **Account Lockout Scenarios:**
                                 
                                         **Failed Login Attempts:**
                                         - **Trigger**: 5 consecutive failed login attempts
                                         - **Duration**: 10 minutes (600 seconds)
                                         - **Purpose**: Prevent brute force attacks
                                         - **Cleared**: Successful login or manual unlock
                                 
                                         **Session Lockout:**
                                         - **Trigger**: Successful login
                                         - **Duration**: 10 minutes or until logout
                                         - **Purpose**: Prevent concurrent sessions
                                         - **Cleared**: Explicit logout
                                 
                                         **Use Cases:**
                                 
                                         **Login Page:**
                                         - Check lockout before showing login form
                                         - Display countdown timer if locked
                                         - Show appropriate error message
                                         - Prevent unnecessary login attempts
                                 
                                         **Account Security:**
                                         - Monitor suspicious login activity
                                         - Detect brute force attempts
                                         - Alert user of security events
                                         - Admin security dashboard
                                 
                                         **User Experience:**
                                         - Show user when they can retry login
                                         - Prevent frustration with clear messaging
                                         - Real-time countdown display
                                         - Automatic re-enable when unlocked
                                 
                                         **Integration Examples:**
                                 
                                         **Frontend Timer:**
                                         ```javascript
                                         // Check lockout status
                                         const response = await fetch('/api/auth/lockout-status/user@example.com');
                                         const data = await response.json();
                                 
                                         if (data.data.remainingTime > 0) {
                                           // Show countdown timer
                                           startCountdown(data.data.remainingTime);
                                         }
                                         ```
                                 
                                         **Admin Dashboard:**
                                         - View all locked accounts
                                         - See remaining lockout times
                                         - Manually unlock accounts if needed
                                         - Track security events
                                       operationId: getLockoutStatus
                                       parameters:
                                         - name: email
                                           in: path
                                           description: User email address to check lockout status
                                           required: true
                                           schema:
                                             type: string
                                           example: customer@example.com
                                       responses:
                                         '200':
                                           description: Lockout status retrieved successfully
                                           content:
                                             application/json:
                                               schema:
                                                 $ref: '#/components/schemas/ApiResponse'
                                               examples:
                                                 Account Locked:
                                                   summary: User account is currently locked
                                                   description: Account Locked
                                                   value:
                                                     success: true
                                                     message: User is locked out
                                                     data:
                                                       remainingTime: 425
                                                     timestamp: '2025-10-22T10:30:00Z'
                                                 Account Not Locked:
                                                   summary: User account is not locked
                                                   description: Account Not Locked
                                                   value:
                                                     success: true
                                                     message: User is not locked out
                                                     timestamp: '2025-10-22T10:30:00Z'
                                         '500':
                                           description: Server error checking lockout status
                                           content:
                                             application/json:
                                               examples:
                                                 Server Error:
                                                   description: Server Error
                                                   value:
                                                     success: false
                                                     message: 'Failed to check lockout status: Redis connection error'
                                                     timestamp: '2025-10-22T10:30:00Z'
                                   /api/admin/users:
                                     get:
                                       tags:
                                         - admin-controller
                                       operationId: getAllUsers
                                       parameters:
                                         - name: Authorization
                                           in: header
                                           required: true
                                           schema:
                                             type: string
                                       responses:
                                         '200':
                                           description: OK
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                   /api/admin/dashboard/stats:
                                     get:
                                       tags:
                                         - admin-controller
                                       operationId: getDashboardStats
                                       parameters:
                                         - name: Authorization
                                           in: header
                                           required: true
                                           schema:
                                             type: string
                                       responses:
                                         '200':
                                           description: OK
                                           content:
                                             application/json:
                                               schema:
                                                 type: object
                                 components:
                                   schemas:
                                     RegisterRequest:
                                       required:
                                         - dateOfBirth
                                         - email
                                         - firstName
                                         - lastName
                                         - password
                                         - phoneNumber
                                       type: object
                                       properties:
                                         email:
                                           maxLength: 100
                                           minLength: 0
                                           type: string
                                         password:
                                           maxLength: 128
                                           minLength: 8
                                           pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$
                                           type: string
                                         firstName:
                                           maxLength: 50
                                           minLength: 2
                                           pattern: ^[a-zA-Z\s'-]+$
                                           type: string
                                         lastName:
                                           maxLength: 50
                                           minLength: 2
                                           pattern: ^[a-zA-Z\s'-]+$
                                           type: string
                                         phoneNumber:
                                           pattern: ^[6-9]\d{9}$
                                           type: string
                                         dateOfBirth:
                                           pattern: ^\d{4}-\d{2}-\d{2}$
                                           type: string
                                         address:
                                           maxLength: 200
                                           minLength: 0
                                           type: string
                                         city:
                                           maxLength: 50
                                           minLength: 0
                                           pattern: ^[a-zA-Z\s'-]*$
                                           type: string
                                         state:
                                           maxLength: 50
                                           minLength: 0
                                           pattern: ^[a-zA-Z\s'-]*$
                                           type: string
                                         country:
                                           maxLength: 50
                                           minLength: 0
                                           pattern: ^[a-zA-Z\s'-]*$
                                           type: string
                                         postalCode:
                                           pattern: ^[1-9]\d{5}$
                                           type: string
                                         aadharNumber:
                                           pattern: ^[2-9]\d{11}$
                                           type: string
                                         panNumber:
                                           pattern: ^[A-Z]{5}[0-9]{4}[A-Z]{1}$
                                           type: string
                                         userType:
                                           pattern: ^(CUSTOMER|ADMIN|EMPLOYEE)$
                                           type: string
                                     ApiResponse:
                                       type: object
                                       properties:
                                         success:
                                           type: boolean
                                         message:
                                           type: string
                                         data:
                                           type: object
                                         error:
                                           type: string
                                         errors:
                                           type: object
                                           additionalProperties:
                                             type: string
                                         timestamp:
                                           type: integer
                                           format: int64
                                     RefreshTokenRequest:
                                       required:
                                         - refreshToken
                                       type: object
                                       properties:
                                         refreshToken:
                                           type: string
                                     LoginRequest:
                                       required:
                                         - email
                                         - password
                                       type: object
                                       properties:
                                         email:
                                           type: string
                                         password:
                                           maxLength: 2147483647
                                           minLength: 6
                                           type: string
                                         rememberMe:
                                           type: boolean
                                   securitySchemes:
                                     bearerAuth:
                                       type: http
                                       description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'
                                       scheme: bearer
                                       bearerFormat: JWT
                                 is-backed session tracking with automatic expiration
    - **Token Denylist**: Real-time token invalidation for logout and security events
    - **Account Lockout**: Automatic lockout after failed login attempts with configurable duration
    - **Public Key Distribution**: JWK (JSON Web Key) endpoint for microservices token verification
    - **BCrypt Password Security**: Industry-standard password hashing with salt

    ## Authentication Flow

    ### Standard Login Flow
    1. **POST /api/auth/login**: Client submits credentials
    2. System validates username/password with BCrypt
    3. JWT access token generated (signed with RSA private key)
    4. Session created in Redis with 24-hour TTL
    5. Client receives access token for subsequent requests

    ### Token Verification in Microservices
    1. Microservice fetches public key from **GET /api/auth/public-key** (once, cached)
    2. For each request, verify JWT signature using public key
    3. Check token expiration and claims
    4. No need to call back to auth service for validation

    ### Logout Flow
    1. **POST /api/auth/logout**: Client submits token
    2. JWT ID (jti) added to denylist in Redis
    3. Session invalidated
    4. Failed login attempts cleared
    5. Token becomes invalid immediately

    ## Security Features

    ### RSA-2048 Asymmetric Encryption
    - **Private Key** (Auth Service only): Signs JWT tokens
    - **Public Key** (Shared via /public-key): Verifies token signatures
    - Microservices can verify tokens but **cannot create** them
    - More secure than symmetric HMAC where shared secret allows both signing and verification

    ### Token Denylist (Blacklist)
    - Logout immediately invalidates tokens
    - Prevents token reuse after logout
    - Redis-backed with TTL matching token expiration
    - Checked during every token validation

    ### Account Lockout Protection
    - **Trigger**: 5 failed login attempts
    - **Duration**: 10 minutes
    - **Cleared**: Successful login or manual unlock
    - Prevents brute force attacks

    ### Session Management
    - Redis-backed for high performance
    - Automatic expiration (24 hours default)
    - Session tracking per user
    - Multi-device support

    ## JWT Token Structure

    ### Access Token Claims
    ```json
    {
      "sub": "user@example.com",           // Subject (email)
      "jti": "uuid-v4",                    // JWT ID (for denylist)
      "userId": "usr_123456",              // User identifier
      "userType": "CUSTOMER",              // User type
      "roles": "USER,CUSTOMER",            // Comma-separated roles
      "iat": 1729584000,                   // Issued at
      "exp": 1729670400                    // Expiration
    }
    ```

    ### Token Expiration
    - **Access Token**: 24 hours (configurable)
    - **Refresh Token**: 7 days (configurable)
    - Tokens can be refreshed using **/api/auth/refresh** endpoint

    ## User Registration

    ### Dual Profile Creation
    When a user registers:
    1. **Auth Profile** created in Auth Service (authentication credentials)
    2. **Full Profile** created via Customer Registration Service (KYC, personal details)
    3. Both profiles linked by userId
    4. Immediate token generation (no separate login required)

    ### Registration Process
    1. Client submits registration details
    2. Validation: email uniqueness, password strength
    3. Password hashed with BCrypt (cost factor 10)
    4. User record created with PENDING status
    5. Call to Customer Registration Service for full profile
    6. JWT token generated and returned

    ## Public Key Distribution (JWK)

    ### JWK Format (RFC 7517)
    The **/api/auth/public-key** endpoint returns:
    ```json
    {
      "keys": [{
        "kty": "RSA",                      // Key type
        "alg": "RS256",                    // Algorithm
        "use": "sig",                      // Usage (signature)
        "kid": "nexabank-auth-key-1",     // Key ID
        "n": "xGOG1oTJ...",               // Modulus (Base64URL)
        "e": "AQAB"                        // Exponent (Base64URL)
      }]
    }
    ```

    ### Microservice Integration
    Most JWT libraries support JWK directly:

    **Java (Spring Security):**
    ```java
    @Bean
    public JwtDecoder jwtDecoder() {
        return NimbusJwtDecoder
            .withJwkSetUri("http://auth-service:3020/api/auth/public-key")
            .build();
    }
    ```

    **Node.js (jsonwebtoken):**
    ```javascript
    const jwksClient = require('jwks-rsa');
    const client = jwksClient({
      jwksUri: 'http://auth-service:3020/api/auth/public-key'
    });
    ```

    ## Error Handling

    ### Standard Error Response
    ```json
    {
      "message": "Error description",
      "timestamp": "2025-10-22T10:30:00Z"
    }
    ```

    ### Common Error Codes
    - **400 Bad Request**: Invalid input parameters
    - **401 Unauthorized**: Authentication failed, invalid credentials
    - **403 Forbidden**: Account locked, insufficient permissions
    - **409 Conflict**: User already exists (registration)
    - **500 Internal Server Error**: Server-side error

    ## Rate Limiting & Security

    ### Account Lockout
    - **Failed Attempts**: 5
    - **Lockout Duration**: 10 minutes
    - **Reset**: Successful login or manual unlock

    ### Redis Performance
    - Session lookup: O(1) complexity
    - Token denylist check: O(1) complexity
    - Automatic TTL expiration

    ## Integration Examples

    ### Example 1: Standard Login
    ```bash
    curl -X POST http://localhost:3020/api/auth/login \
      -H "Content-Type: application/json" \
      -d '{
        "email": "customer@example.com",
        "password": "SecurePass123!"
      }'
    ```

    **Response:**
    ```json
    {
      "token": "eyJhbGciOiJSUzI1NiJ9...",
      "userId": "usr_123456",
      "userType": "CUSTOMER",
      "email": "customer@example.com"
    }
    ```

    ### Example 2: Register New User
    ```bash
    curl -X POST http://localhost:3020/api/auth/register \
      -H "Content-Type: application/json" \
      -d '{
        "username": "johndoe",
        "email": "john.doe@example.com",
        "password": "SecurePass123!",
        "userType": "CUSTOMER"
      }'
    ```

    ### Example 3: Fetch Public Key for Token Verification
    ```bash
    curl -X GET http://localhost:3020/api/auth/public-key
    ```

    **Response:**
    ```json
    {
      "keys": [{
        "kty": "RSA",
        "alg": "RS256",
        "use": "sig",
        "kid": "nexabank-auth-key-1",
        "n": "xGOG1oTJ5YrKMZ...",
        "e": "AQAB"
      }]
    }
    ```

    ### Example 4: Logout
    ```bash
    curl -X POST http://localhost:3020/api/auth/logout \
      -H "Authorization: Bearer eyJhbGciOiJSUzI1NiJ9..."
    ```

    ## Architecture Notes

    ### Microservices Architecture
    - Auth Service runs on port 3020
    - Customer Registration Service: port 8080
    - Product & Pricing Service: port 8080
    - All services use JWT for authentication
    - Public key distributed via JWK endpoint

    ### Database & Cache
    - **PostgreSQL**: User credentials, audit logs
    - **Redis**: Sessions, token denylist, lockout tracking
    - Redis TTL matches token expiration for automatic cleanup

    ### Scalability
    - Stateless JWT tokens (no server-side session storage for verification)
    - Redis for fast session lookups
    - Horizontal scaling supported
    - Load balancer compatible

    ## Best Practices

    1. **Token Storage**: Store tokens securely (HttpOnly cookies or secure storage)
    2. **HTTPS Only**: Always use HTTPS in production
    3. **Token Refresh**: Implement token refresh before expiration
    4. **Logout**: Always call logout endpoint to invalidate tokens
    5. **Public Key Caching**: Cache public key in microservices (refresh periodically)
    6. **Error Handling**: Implement proper error handling for 401/403 responses

    ## Support
    For API support, integration help, or reporting issues:
    - Email: support@nexabank.com
    - Documentation: https://www.nexabank.com/api-docs
    - Status: https://status.nexabank.com
  termsOfService: https://www.nexabank.com/terms
  contact:
    name: NEXA Bank API Support
    url: https://www.nexabank.com
    email: support@nexabank.com
  license:
    name: Proprietary
    url: https://www.nexabank.com/license
  version: 1.0.0
servers:
  - url: http://localhost:3020
    description: Development Server
  - url: https://api.nexabank.com
    description: Production Server
tags:
  - name: Public
    description: Public endpoints for JWT verification - accessible without authentication
  - name: Authentication
    description: Core authentication endpoints for login, registration, logout, and token refresh
  - name: Admin
    description: Administrative endpoints for account management and security operations
  - name: Public
    description: Public endpoints accessible without authentication
paths:
  /api/admin/users/{userId}/status:
    put:
      tags:
        - admin-controller
      operationId: updateUserStatus
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/admin/users/{userId}/roles:
    put:
      tags:
        - admin-controller
      operationId: updateUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user account
      description: |
        Register a new user with email, password, and basic details. Creates dual profiles and returns immediate access tokens.

        **Registration Process:**
        1. Validates email uniqueness in database
        2. Validates password strength requirements
        3. Hashes password with BCrypt (cost factor 10)
        4. Creates Auth Profile in Auth Service database
        5. Calls Customer Registration Service to create Full Profile
        6. Links both profiles by userId
        7. Generates JWT tokens for immediate login (no separate login required)
        8. Returns tokens and user data

        **Dual Profile Architecture:**

        **Auth Profile (This Service):**
        - Email, password hash, user type
        - Authentication credentials
        - Login/session management
        - Stored in PostgreSQL

        **Full Profile (Customer Service):**
        - Personal details, KYC information
        - Account preferences, documents
        - Transaction history
        - Stored in Customer Service database

        **Password Requirements:**
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter
        - At least one number
        - Special characters recommended

        **User Types:**
        - **CUSTOMER**: Regular customer account
        - **ADMIN**: Administrative account (restricted)
        - **EMPLOYEE**: Bank employee account
        - **PARTNER**: Business partner account

        **Immediate Access:**
        - No email verification required
        - User can login immediately after registration
        - Access and refresh tokens provided in response
        - User status: PENDING (can be activated later)

        **Integration:**
        - Calls Customer Registration Service (port 8080)
        - Creates full customer profile automatically
        - Handles service failures gracefully
        - Rolls back on errors

        **Example Use Cases:**

        **New Customer Registration:**
        - Customer fills registration form
        - System validates and creates accounts
        - Returns tokens for immediate access
        - Customer can start using services

        **Employee Registration:**
        - Admin creates employee account
        - Employee type set to EMPLOYEE
        - Additional benefits applied
        - Full access granted immediately
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: Registration successful - user created and tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                Customer Registration:
                  summary: New customer successfully registered
                  description: Customer Registration
                  value:
                    success: true
                    message: User registered successfully
                    data:
                      accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJuZXdjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6ImFiY2RlZjEyLTM0NTYtNzg5MC1hYmNkLWVmMTIzNDU2Nzg5MCIsInVzZXJJZCI6InVzcl83ODkwMTIiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwicm9sZXMiOiJVU0VSLENVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3Mjk2NzA0MDB9...
                      refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJuZXdjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6IjEyMzQ1Njc4LTkwYWItY2RlZi0xMjM0LTU2Nzg5MGFiY2RlZiIsInVzZXJJZCI6InVzcl83ODkwMTIiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                      tokenType: Bearer
                      expiresIn: 86400
                      user:
                        userId: usr_789012
                        username: janedoe
                        email: newcustomer@example.com
                        userType: CUSTOMER
                        roles:
                          - USER
                          - CUSTOMER
                        status: PENDING
                    timestamp: '2025-10-22T10:30:00Z'
                Employee Registration:
                  summary: New employee account registered
                  description: Employee Registration
                  value:
                    success: true
                    message: User registered successfully
                    data:
                      accessToken: eyJhbGciOiJSUzI1NiJ9...
                      refreshToken: eyJhbGciOiJSUzI1NiJ9...
                      tokenType: Bearer
                      expiresIn: 86400
                      user:
                        userId: usr_345678
                        username: employee1
                        email: employee@nexabank.com
                        userType: EMPLOYEE
                        roles:
                          - USER
                          - EMPLOYEE
                          - SUPPORT
                        status: ACTIVE
                    timestamp: '2025-10-22T10:30:00Z'
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              examples:
                Validation Error:
                  summary: Invalid input parameters
                  description: Validation Error
                  value:
                    success: false
                    message: Password must be at least 8 characters
                    timestamp: '2025-10-22T10:30:00Z'
        '409':
          description: Conflict - user already exists with this email
          content:
            application/json:
              examples:
                User Already Exists:
                  summary: Email already registered
                  description: User Already Exists
                  value:
                    success: false
                    message: User with this email already exists
                    timestamp: '2025-10-22T10:30:00Z'
        '500':
          description: Server error during registration
          content:
            application/json:
              examples:
                Server Error:
                  description: Server Error
                  value:
                    success: false
                    message: 'Registration failed: Customer service unavailable'
                    timestamp: '2025-10-22T10:30:00Z'
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token using refresh token
      description: |
        Exchange refresh token for new access and refresh tokens. Implements token rotation for security.

        **Token Refresh Process:**
        1. Validates refresh token signature and expiration
        2. Checks if user account is locked out
        3. Extracts user email from refresh token
        4. Generates new access token (24h validity)
        5. Generates new refresh token (7d validity)
        6. Adds old refresh token to denylist (prevents reuse)
        7. Resets user session lockout (extends 10-minute lock)
        8. Returns new token pair

        **Token Rotation:**
        - Old refresh token immediately invalidated
        - New refresh token issued with each request
        - Prevents refresh token theft and replay attacks
        - One-time use refresh tokens

        **Security Benefits:**
        - Refresh token rotation (one-time use)
        - Old tokens added to denylist
        - Account lockout check before refresh
        - Stolen token detection

        **When to Use:**
        - Access token expired or about to expire
        - Proactive token refresh (before expiration)
        - User still active but token old
        - Maintaining session continuity

        **Best Practices:**
        - Refresh token before access token expires
        - Store new tokens securely
        - Invalidate old tokens immediately
        - Implement retry logic with exponential backoff

        **Token Lifecycle:**
        1. **Login**: Get initial token pair (access + refresh)
        2. **Use**: Use access token for API calls
        3. **Refresh**: Before expiration, refresh tokens
        4. **Repeat**: Continue refresh cycle
        5. **Logout**: Invalidate all tokens

        **Example Use Cases:**

        **Proactive Refresh:**
        - Frontend checks token expiration
        - 5 minutes before expiry, calls refresh
        - Gets new tokens without user interaction
        - Seamless user experience

        **Expired Token:**
        - API returns 401 Unauthorized
        - Frontend automatically calls refresh
        - Retries original request with new token
        - Transparent to user

        **Long Session:**
        - User active for multiple hours
        - Tokens refreshed periodically
        - No re-login required
        - Maintains security with rotation
      operationId: refresh
      requestBody:
        description: Refresh token request containing the refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              Refresh Request:
                description: Refresh Request
                value:
                  refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im9sZC1yZWZyZXNoLWlkLTc4OSIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTAwMDAwLCJleHAiOjE3MzAxMDQ4MDB9...
        required: true
      responses:
        '200':
          description: Token refresh successful - new tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                Successful Refresh:
                  summary: Tokens successfully refreshed
                  description: Successful Refresh
                  value:
                    success: true
                    message: Token refreshed successfully
                    data:
                      accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im5ldy1qd3QtaWQtMTIzIiwidXNlcklkIjoidXNyXzEyMzQ1NiIsInVzZXJUeXBlIjoiQ1VTVE9NRVIiLCJyb2xlcyI6IlVTRVIsQ1VTVE9NRVIiLCJpYXQiOjE3Mjk1ODQwMDAsImV4cCI6MTcyOTY3MDQwMH0...
                      refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Im5ldy1yZWZyZXNoLWlkLTQ1NiIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                      tokenType: Bearer
                      expiresIn: 86400
                      user:
                        userId: usr_123456
                        username: johndoe
                        email: customer@example.com
                        userType: CUSTOMER
                        roles:
                          - USER
                          - CUSTOMER
                    timestamp: '2025-10-22T10:30:00Z'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              examples:
                Invalid Token:
                  summary: Refresh token invalid or expired
                  description: Invalid Token
                  value:
                    success: false
                    message: Invalid refresh token
                    timestamp: '2025-10-22T10:30:00Z'
        '423':
          description: Account locked - cannot refresh
          content:
            application/json:
              examples:
                Account Locked:
                  description: Account Locked
                  value:
                    success: false
                    message: Account locked. Please try again in 450 seconds
                    timestamp: '2025-10-22T10:30:00Z'
        '500':
          description: Server error during token refresh
          content:
            application/json:
              examples:
                Server Error:
                  description: Server Error
                  value:
                    success: false
                    message: 'Token refresh failed: Internal server error'
                    timestamp: '2025-10-22T10:30:00Z'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user and invalidate tokens
      description: |
        Logout user by invalidating JWT token and clearing session. Token becomes immediately unusable.

        **Logout Process:**
        1. Extracts JWT token from Authorization header
        2. Adds JWT ID (jti) to Redis denylist (immediate invalidation)
        3. Clears user session lockout (allows immediate re-login)
        4. Invalidates session in Redis
        5. Returns success confirmation

        **Token Invalidation:**
        - JWT ID added to denylist in Redis
        - Denylist TTL matches token expiration
        - All subsequent requests with this token fail validation
        - Works even if token hasn't expired

        **Session Cleanup:**
        - Session removed from Redis
        - User lockout cleared (10-minute restriction removed)
        - Failed login attempts reset
        - User can login again immediately

        **Security Benefits:**
        - Immediate token revocation
        - Prevents token reuse after logout
        - Protects against stolen tokens
        - Graceful session termination

        **Microservices Impact:**
        - Other microservices will reject denylisted tokens
        - Public key verification still works
        - Denylist needs to be checked during verification
        - Consider implementing denylist sync if needed

        **Example Use Cases:**

        **Standard Logout:**
        - User clicks logout button
        - Frontend sends token to this endpoint
        - Token immediately invalidated
        - User redirected to login page

        **Security Logout:**
        - Suspicious activity detected
        - Admin forces user logout
        - All user sessions terminated
        - User must re-authenticate

        **Session Timeout:**
        - Frontend detects token expiration
        - Calls logout to cleanup
        - User prompted to login again
        - Clean session state
      operationId: logout
      parameters:
        - name: Authorization
          in: header
          description: 'Bearer token in format: Bearer <token>'
          required: true
          schema:
            type: string
          example: Bearer eyJhbGciOiJSUzI1NiJ9...
      responses:
        '200':
          description: Logout successful - token invalidated
          content:
            application/json:
              examples:
                Successful Logout:
                  summary: User successfully logged out
                  description: Successful Logout
                  value:
                    success: true
                    message: Logged out successfully
                    timestamp: '2025-10-22T10:30:00Z'
        '500':
          description: Server error during logout
          content:
            application/json:
              examples:
                Server Error:
                  description: Server Error
                  value:
                    success: false
                    message: 'Logout failed: Redis connection error'
                    timestamp: '2025-10-22T10:30:00Z'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login with email and password
      description: |
        Authenticate user with email and password credentials. Returns JWT access and refresh tokens.

        **Authentication Flow:**
        1. Checks if account is locked out (after 5 failed attempts)
        2. Validates email and password using BCrypt
        3. Generates JWT access token (24h) and refresh token (7d)
        4. Sets 10-minute session lockout (prevents concurrent sessions)
        5. Creates session in Redis for tracking

        **Account Lockout Protection:**
        - **Trigger**: 5 consecutive failed login attempts
        - **Duration**: 10 minutes
        - **Cleared**: Successful login or explicit logout
        - Prevents brute force attacks

        **Token Details:**
        - **Access Token**: Used for API authentication (24 hours)
        - **Refresh Token**: Used to obtain new access token (7 days)
        - Both tokens signed with RSA-2048 private key
        - JWT ID (jti) included for denylist tracking

        **Session Management:**
        - Session created in Redis with 24-hour TTL
        - User locked for 10 minutes (single session enforcement)
        - Must logout to unlock for new login

        **Example Use Cases:**

        **Customer Login:**
        - Customer enters email and password
        - System validates credentials
        - Returns tokens for authenticated requests
        - Frontend stores tokens securely

        **Failed Login:**
        - Invalid credentials tracked
        - After 5 failures, account locked for 10 minutes
        - Lockout status can be checked via /lockout-status endpoint

        **Security Features:**
        - BCrypt password hashing (cost factor 10)
        - Failed attempt tracking in Redis
        - Automatic account lockout
        - Session-based lockout (no concurrent sessions)
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Login successful - tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                Successful Login:
                  summary: Customer successfully logged in
                  description: Successful Login
                  value:
                    success: true
                    message: Login successful
                    data:
                      accessToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6IjEyMzQ1Njc4LTkwYWItY2RlZi0xMjM0LTU2Nzg5MGFiY2RlZiIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwicm9sZXMiOiJVU0VSLENVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3Mjk2NzA0MDB9...
                      refreshToken: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lckBleGFtcGxlLmNvbSIsImp0aSI6Ijk4NzY1NDMyLTEwZmUtZGNiYS00MzIxLTA5ODc2NTQzMjFmZSIsInVzZXJJZCI6InVzcl8xMjM0NTYiLCJ1c2VyVHlwZSI6IkNVU1RPTUVSIiwiaWF0IjoxNzI5NTg0MDAwLCJleHAiOjE3MzAxODg4MDB9...
                      tokenType: Bearer
                      expiresIn: 86400
                      user:
                        userId: usr_123456
                        username: johndoe
                        email: customer@example.com
                        userType: CUSTOMER
                        roles:
                          - USER
                          - CUSTOMER
                    timestamp: '2025-10-22T10:30:00Z'
        '401':
          description: Authentication failed - invalid credentials
          content:
            application/json:
              examples:
                Invalid Credentials:
                  summary: Wrong email or password
                  description: Invalid Credentials
                  value:
                    success: false
                    message: Invalid email or password
                    timestamp: '2025-10-22T10:30:00Z'
        '423':
          description: Account locked - too many failed attempts
          content:
            application/json:
              examples:
                Account Locked:
                  summary: Account locked due to failed attempts
                  description: Account Locked
                  value:
                    success: false
                    message: Account locked. Please try again in 587 seconds
                    timestamp: '2025-10-22T10:30:00Z'
        '500':
          description: Server error during authentication
          content:
            application/json:
              examples:
                Server Error:
                  description: Server Error
                  value:
                    success: false
                    message: 'Authentication failed: Internal server error'
                    timestamp: '2025-10-22T10:30:00Z'
  /api/auth/public-key:
    get:
      tags:
        - Authentication
        - Public
      summary: Get JWT public key for token verification
      description: |
        Retrieve RSA public key in JWK (JSON Web Key) format for independent JWT token verification.

        **Purpose:**
        - Enable microservices to verify JWT tokens without calling back to auth service
        - Distribute public key in industry-standard JWK format (RFC 7517)
        - Support stateless authentication architecture
        - Improve performance and reduce auth service load

        **JWK Format (RFC 7517):**
        Returns JWKS (JWK Set) with single RSA public key containing:
        - **kty**: Key type (RSA)
        - **alg**: Algorithm (RS256 - RSA with SHA-256)
        - **use**: Key usage (sig - signature verification)
        - **kid**: Key ID (nexabank-auth-key-1)
        - **n**: RSA modulus (Base64URL encoded)
        - **e**: RSA public exponent (Base64URL encoded, typically AQAB)

        **RSA-2048 Asymmetric Encryption:**
        - **Private Key** (Auth Service only): Signs JWT tokens
        - **Public Key** (Shared via this endpoint): Verifies token signatures
        - Microservices can verify but **cannot create** tokens
        - More secure than symmetric HMAC (shared secret)

        **Microservice Integration:**

        **Java (Spring Security):**
        ```java
        @Bean
        public JwtDecoder jwtDecoder() {
            return NimbusJwtDecoder
                .withJwkSetUri("http://auth-service:3020/api/auth/public-key")
                .build();
        }
        ```

        **Node.js (jwks-rsa + jsonwebtoken):**
        ```javascript
        const jwksClient = require('jwks-rsa');
        const jwt = require('jsonwebtoken');

        const client = jwksClient({
          jwksUri: 'http://auth-service:3020/api/auth/public-key',
          cache: true,
          cacheMaxAge: 86400000 // 24 hours
        });

        function getKey(header, callback) {
          client.getSigningKey(header.kid, (err, key) => {
            const signingKey = key.publicKey || key.rsaPublicKey;
            callback(null, signingKey);
          });
        }

        // Verify token
        jwt.verify(token, getKey, { algorithms: ['RS256'] }, (err, decoded) => {
          if (err) console.error('Invalid token');
          else console.log('Valid token:', decoded);
        });
        ```

        **Python (PyJWT):**
        ```python
        import jwt
        from jwt import PyJWKClient

        jwks_client = PyJWKClient('http://auth-service:3020/api/auth/public-key')
        signing_key = jwks_client.get_signing_key_from_jwt(token)

        data = jwt.decode(
            token,
            signing_key.key,
            algorithms=["RS256"]
        )
        ```

        **Best Practices:**
        1. **Cache Public Key**: Fetch once and cache (key doesn't change frequently)
        2. **Periodic Refresh**: Refresh cache every 24 hours or on verification failure
        3. **Handle Rotation**: Support key rotation with kid (key ID) matching
        4. **Denylist Check**: Implement denylist check if needed for immediate revocation
        5. **Algorithm Validation**: Always validate algorithm is RS256

        **Security Notes:**
        - Public key can be safely exposed (public endpoint, no auth required)
        - Cannot be used to create new tokens (private key required)
        - Enables zero-trust architecture
        - Supports horizontal scaling of auth service

        **Use Cases:**

        **Microservice Authentication:**
        - Payment service verifies user tokens
        - Account service validates requests
        - Transaction service checks authorization
        - No round-trip to auth service needed

        **API Gateway:**
        - Gateway fetches public key on startup
        - Verifies all incoming requests
        - Routes only valid requests to services
        - Rejects invalid tokens immediately

        **Mobile Apps:**
        - App verifies token before API calls
        - Offline token validation
        - Reduced latency
        - Better user experience
      operationId: getPublicKey
      responses:
        '200':
          description: Public key retrieved successfully in JWK format
          content:
            application/json:
              examples:
                JWK Public Key:
                  summary: RSA public key in JWKS format
                  description: JWK Public Key
                  value:
                    keys:
                      - kty: RSA
                        alg: RS256
                        use: sig
                        kid: nexabank-auth-key-1
                        'n': xGOG1oTJ5YrKMZKm9FZFvQW8cPJHKqH8vGsJ7rL5TwN8mVxPYvK2hL9sR4mN3pQ6tW8xY9zK7jM5nP8qR2sT4uV6wX0yA1bC3dE5fG7hI9jK1lM3nO5pQ7rS9tU1vW3xY5zA7bC9dE1fG3hI5jK7lM9nO1pQ3rS5tU7vW9xY1zA3bC5dE7fG9hI1jK3lM5nO7pQ9rS1tU3vW5xY7zA9bC1dE3fG5hI7jK9lM1nO3pQ5rS7tU9vW1xY3zA5bC7dE9fG1hI3jK5lM7nO9pQ1rS3tU5vW7xY9zA1bC3dE5fG7hI9jK1lM3nO5pQ7rS9tU1vW3xY5zA7bC9dE1fG3hI5jK7lM9nO1pQ3rS5tU7vW9xY1zA3bC5dE7fG9hI1jK3lM5nO7pQ9rS1tU3vW5xY7zA9bC1dE3fG5hI7jK9lM1nO3pQ5rS7tU9vW1xY3zA5bC7dE9fG1hI3jK5lM7nO9pQ1rS3tU5vW7xY9zA
                        e: AQAB
  /api/auth/lockout-status/{email}:
    get:
      tags:
        - Authentication
      summary: Check account lockout status
      description: |
        Check if a user account is currently locked out and get remaining lockout time.

        **Lockout Status Check:**
        - Returns current lockout state for given email
        - Shows remaining time if account is locked
        - Returns 0 seconds if account is not locked
        - Useful for UI to display lockout information

        **Account Lockout Scenarios:**

        **Failed Login Attempts:**
        - **Trigger**: 5 consecutive failed login attempts
        - **Duration**: 10 minutes (600 seconds)
        - **Purpose**: Prevent brute force attacks
        - **Cleared**: Successful login or manual unlock

        **Session Lockout:**
        - **Trigger**: Successful login
        - **Duration**: 10 minutes or until logout
        - **Purpose**: Prevent concurrent sessions
        - **Cleared**: Explicit logout

        **Use Cases:**

        **Login Page:**
        - Check lockout before showing login form
        - Display countdown timer if locked
        - Show appropriate error message
        - Prevent unnecessary login attempts

        **Account Security:**
        - Monitor suspicious login activity
        - Detect brute force attempts
        - Alert user of security events
        - Admin security dashboard

        **User Experience:**
        - Show user when they can retry login
        - Prevent frustration with clear messaging
        - Real-time countdown display
        - Automatic re-enable when unlocked

        **Integration Examples:**

        **Frontend Timer:**
        ```javascript
        // Check lockout status
        const response = await fetch('/api/auth/lockout-status/user@example.com');
        const data = await response.json();

        if (data.data.remainingTime > 0) {
          // Show countdown timer
          startCountdown(data.data.remainingTime);
        }
        ```

        **Admin Dashboard:**
        - View all locked accounts
        - See remaining lockout times
        - Manually unlock accounts if needed
        - Track security events
      operationId: getLockoutStatus
      parameters:
        - name: email
          in: path
          description: User email address to check lockout status
          required: true
          schema:
            type: string
          example: customer@example.com
      responses:
        '200':
          description: Lockout status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                Account Locked:
                  summary: User account is currently locked
                  description: Account Locked
                  value:
                    success: true
                    message: User is locked out
                    data:
                      remainingTime: 425
                    timestamp: '2025-10-22T10:30:00Z'
                Account Not Locked:
                  summary: User account is not locked
                  description: Account Not Locked
                  value:
                    success: true
                    message: User is not locked out
                    timestamp: '2025-10-22T10:30:00Z'
        '500':
          description: Server error checking lockout status
          content:
            application/json:
              examples:
                Server Error:
                  description: Server Error
                  value:
                    success: false
                    message: 'Failed to check lockout status: Redis connection error'
                    timestamp: '2025-10-22T10:30:00Z'
  /api/admin/users:
    get:
      tags:
        - admin-controller
      operationId: getAllUsers
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/admin/dashboard/stats:
    get:
      tags:
        - admin-controller
      operationId: getDashboardStats
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    RegisterRequest:
      required:
        - dateOfBirth
        - email
        - firstName
        - lastName
        - password
        - phoneNumber
      type: object
      properties:
        email:
          maxLength: 100
          minLength: 0
          type: string
        password:
          maxLength: 128
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$
          type: string
        firstName:
          maxLength: 50
          minLength: 2
          pattern: ^[a-zA-Z\s'-]+$
          type: string
        lastName:
          maxLength: 50
          minLength: 2
          pattern: ^[a-zA-Z\s'-]+$
          type: string
        phoneNumber:
          pattern: ^[6-9]\d{9}$
          type: string
        dateOfBirth:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        address:
          maxLength: 200
          minLength: 0
          type: string
        city:
          maxLength: 50
          minLength: 0
          pattern: ^[a-zA-Z\s'-]*$
          type: string
        state:
          maxLength: 50
          minLength: 0
          pattern: ^[a-zA-Z\s'-]*$
          type: string
        country:
          maxLength: 50
          minLength: 0
          pattern: ^[a-zA-Z\s'-]*$
          type: string
        postalCode:
          pattern: ^[1-9]\d{5}$
          type: string
        aadharNumber:
          pattern: ^[2-9]\d{11}$
          type: string
        panNumber:
          pattern: ^[A-Z]{5}[0-9]{4}[A-Z]{1}$
          type: string
        userType:
          pattern: ^(CUSTOMER|ADMIN|EMPLOYEE)$
          type: string
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: integer
          format: int64
    RefreshTokenRequest:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
        rememberMe:
          type: boolean
